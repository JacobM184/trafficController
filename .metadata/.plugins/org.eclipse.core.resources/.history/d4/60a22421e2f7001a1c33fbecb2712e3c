#include <system.h>
#include <stdio.h>
#include <altera_avalon_pio_regs.h>
#include "ledLocation.h"

extern unsigned int pedNS, pedEW;

void init_buttons_pio(){
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x3);

}

void NSEW_ped_isr(void* context, alt_u32 id){

    int* temp = (int*) context;
    (*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);

    // clears the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);

    int NSraised = *temp & 0x02;
    int EWraised = *temp & 0x01;

    if(NSraised && pedNS == 0){
        pedNS = 1;
    }

    if(EWraised && pedEW == 0){
        pedEW = 1;
    }
}

void pedestrian_tlc(void* timerContext, unsigned int state){

	int* timerValue = (int*) timerContext;

	switch (state)
		{
		case 0:
			// set timer value for next
			*timerValue = 2000;
			// set current LEDs
			if(pedNS == 1){

				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, GRP);
				pedNS = 0;

			}else{

				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, GR);
			}

			break;

		case 1:
			// set timer value for next
			*timerValue = 500;
			// set current LEDs
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, YR);

			break;

		case 2:
			// set timer value for next
			*timerValue = 6000;
			// set current LEDs
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, RR);

			break;

		case 3:
			// set timer value for next
			*timerValue = 2000;
			// set current LEDs
			if(pedEW == 1){

				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, RGP);
				pedEW = 0;

			}else{

				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, RG);
			}

			break;

		case 4:
			// set timer value for next
			*timerValue = 500;
			// set current LEDs
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, RY);

			break;

		case 5:
			// set timer value for next
			*timerValue = 6000;
			// set current LEDs
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, RR);

			break;
		default:
			break;
		}
}
